{"version":3,"sources":["components/Loading/index.js","pages/Home/index.js","App.js","serviceWorker.js","utils/getWeb3.js","reducers/tomoReducer.js","actions/index.js","reducers/index.js","store.js","index.js"],"names":["Loading","react_default","a","createElement","alt","src","Home","tomo","this","props","web3","components_Loading","Component","compose","connect","state","App","react_router_dom","className","react_router","exact","path","component","Boolean","window","location","hostname","match","getWeb3","_ref","Object","asyncToGenerator","regenerator_default","mark","_callee","_web","provider","_web2","wrap","_context","prev","next","ethereum","Web3","enable","abrupt","t0","console","error","log","providers","HttpProvider","stop","apply","arguments","initialState","account","balance","tomoReducer","length","undefined","action","type","objectSpread","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","appRoot","document","getElementById","ReactDOM","render","es","src_App","addEventListener","dispatch","accounts","sent","eth","getAccounts","getBalance","_x","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e9f7c63.chunk.js","sourcesContent":["import React from 'react';\nconst Loading = () => {\n  return (\n    <img\n      alt=''\n      src='https://media.giphy.com/media/3o7TKtbdY5oZuiyucg/giphy.gif'\n    />\n  );\n};\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport Loading from '../../components/Loading';\n\nclass Home extends Component {\n  render() {\n    const { tomo } = this.props;\n    return <div>{tomo.web3 ? <h1>hello world</h1> : <Loading />}</div>;\n  }\n}\n\nconst mapStatetoProps = state => {\n  return {\n    tomo: state.tomo\n  };\n};\n\nexport default compose(connect(mapStatetoProps))(Home);\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className='App'>\n        <Switch>\n          <Route exact path='/' component={Home} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import Web3 from 'web3';\n\nconst getWeb3 = async () => {\n  // Wait for loading completion to avoid race conditions with web3 injection timing.\n  if (window.ethereum) {\n    const web3 = new Web3(window.ethereum);\n    try {\n      // Request account access if needed\n      await window.ethereum.enable();\n      // Acccounts now exposed\n      return web3;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n  // Legacy dapp browsers...\n  else if (window.web3) {\n    // Use Mist/MetaMask's provider.\n    const web3 = window.web3;\n    console.log('Injected web3 detected.');\n    return web3;\n  }\n  // Fallback to localhost; use dev console port by default...\n  else {\n    const provider = new Web3.providers.HttpProvider('http://127.0.0.1:9545');\n    const web3 = new Web3(provider);\n    console.log('No web3 instance injected, using Local web3.');\n    return web3;\n  }\n};\n\nexport default getWeb3;\n","import * as actions from '../actions';\n\nconst initialState = {\n  web3: null,\n  account: null,\n  balance: 0\n};\n\nconst tomoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actions.WEB3_CONNECT:\n      return {\n        ...state,\n        web3: action.web3,\n        account: action.account\n      };\n    default:\n      return state;\n  }\n};\n\nexport default tomoReducer;\n","import getWeb3 from '../utils/getWeb3';\nexport const WEB3_CONNECT = 'WEB3_CONNECT';\nexport const web3Connect = () => async dispatch => {\n  // const web3 = new Web3(Web3.givenProvider || 'ws://127.0.0.1:8545');\n  const web3 = await getWeb3();\n  const accounts = await web3.eth.getAccounts();\n  if (accounts.length > 0) {\n    const account = accounts[0];\n    console.log('Web3 Account:', account);\n    const balance = await web3.eth.getBalance(account);\n    dispatch({\n      type: WEB3_CONNECT,\n      web3,\n      account,\n      balance\n    });\n  } else {\n    console.log('Account not found');\n  }\n};\n","import { combineReducers } from 'redux';\nimport tomoReducer from './tomoReducer';\n\nconst rootReducer = combineReducers({\n  tomo: tomoReducer\n});\n\nexport default rootReducer;\n","import rootReducer from './reducers';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport * as actions from './actions';\n\nconst appRoot = document.getElementById('root');\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  appRoot\n);\n\nwindow.addEventListener('load', async () => {\n  if (window.web3) {\n    await store.dispatch(actions.web3Connect());\n  }\n});\n\nserviceWorker.unregister();\n"],"sourceRoot":""}